#!/usr/bin/env python

"""Small utility to link a tree of files (typically pictures) into one folder.

This is useful when you'd like a program that works with a single directory, like a background changing or slideshow tool, to display pictures from a whole tree.

The utility can dillute the amount of pictures by linking files only probabilistically, and supports both hardlinks and soft links.
"""

from __future__ import print_function

import os
import sys
import argparse
from random import random, shuffle
from uuid import uuid4
from subprocess import Popen, PIPE
from clint.textui.progress import dots, bar

devnull = open('/dev/null', 'w')

def get_md5_of_path(path):
    process = Popen(['md5sum', path], stdout=PIPE, stderr=devnull)
    out, err = process.communicate()
    if process.wait() != 0:
        raise IOError('unable to get md5 of ' + path)
    return out.split()[0]

def parse_arguments(argv):
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--allow-existing', default=False, action='store_true')
    parser.add_argument('--name', default='random', choices=('random', 'md5'))
    parser.add_argument('--overwrite', default=False, action='store_true')
    parser.add_argument('--hardlink', default=False, action='store_true')
    parser.add_argument('--dont-shuffle', dest='shuffle', default=True, action='store_false')
    parser.add_argument('--ratio', default=1, type=float)
    parser.add_argument('src')
    parser.add_argument('dst')
    options = parser.parse_args(argv[1:])
    if options.name == 'random':
        options.name = lambda src: uuid4().hex + os.path.splitext(src)[-1]
    elif options.name == 'md5':
        options.name = get_md5_of_path
    else:
        raise AssertionError('unexpected name option')
    return options

def yield_joined_paths(root):
    for directory, subdirectories, filenames in os.walk(root):
        for filename in filenames:
            yield os.path.join(directory, filename)

def get_src_paths_iterable(options):
    base_iterable = dots(yield_joined_paths(options.src))
    if options.shuffle:
        pathlist = list(base_iterable)
        shuffle(pathlist)
        base_iterable = bar(pathlist)
    return base_iterable
    
def main(options):
    if not options.allow_existing and os.path.isdir(options.dst):
        raise SystemExit('refusing to use existing directory %s' % (options.dst,))
    os.makedirs(options.dst)

    try:
        for src in get_src_paths_iterable(options):
            dst = os.path.join(options.dst, options.name(src).lower())
            if os.path.exists(dst) and not options.overwrite:
                continue
            if random() > options.ratio:
                continue
            (os.link if options.hardlink else os.symlink)(src, dst)
    except KeyboardInterrupt:
        pass

if __name__ == '__main__':
    main(parse_arguments(sys.argv))
