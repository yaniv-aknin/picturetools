#!/usr/bin/env python

"""Reconstruct a directory tree from a resized picture directory tree and a 'pool' directory of pictures.

This is useful when resizing a tree of pictures (see resize_picture_tree), reorganizing the tree and wanting the reorganization to be reflected on the source tree (or a clone of it, since you're only relinking a duplicate of the source tree). That way, you can choose the best pictures with the speed that low-res pictures offer, but then let this change be reflected on the high-res pictures.

To create the flat 'pool' of source pictures, see symlink_into_one_folder.
"""

from __future__ import print_function

import os
import sys
import argparse
from subprocess import Popen, PIPE
import json

devnull = open('/dev/null', 'w')

def get_md5_of_path(path):
    process = Popen(['md5sum', path], stdout=PIPE, stderr=devnull)
    out, err = process.communicate()
    if process.wait() != 0:
        raise IOError('unable to get md5 of ' + path)
    return out.split()[0]

def parse_arguments(argv):
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--hardlink', default=False, action='store_true')
    parser.add_argument('src')
    parser.add_argument('dst')
    parser.add_argument('metadata')
    parser.add_argument('pool')
    options = parser.parse_args(argv[1:])
    return options

def main(options):
    with open(options.metadata) as handle:
        raw_metadata = json.load(handle)
        post_to_pre = {datum['dst_md5']: datum['src_md5']
                              for datum in raw_metadata}

    for directory, subdirectories, filenames in os.walk(options.src):
        src_dir = os.path.join(options.src, directory)
        dst_dir = os.path.join(options.dst, os.path.relpath(src_dir, options.src))
        for filename in filenames:
            if not os.path.isdir(dst_dir):
                os.makedirs(dst_dir)
            src = os.path.join(src_dir, filename)
            if os.path.normpath(os.path.abspath(src)) == os.path.normpath(os.path.abspath(options.metadata)):
                continue
            dst = os.path.join(dst_dir, filename)
            post_md5 = get_md5_of_path(src)
            try:
                pre_md5 = post_to_pre[post_md5]
            except KeyError:
                print('%s (%s) not in metadata' % (src, post_md5[:6]))
                continue
            pool_path = os.path.join(options.pool, pre_md5)
            if not os.path.exists(pool_path):
                print('%s (%s) not in pool' % (src, pre_md5[:6]))
                continue
            action = os.link if options.hardlink else os.symlink
            action(os.path.join(options.pool, pre_md5), dst)

if __name__ == '__main__':
    main(parse_arguments(sys.argv))
