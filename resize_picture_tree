#!/usr/bin/env python

from __future__ import print_function

from multiprocessing import cpu_count, Process, Queue
import os
import time
import sys
import argparse
from subprocess import Popen, PIPE

devnull = open('/dev/null', 'w')

class Message(object):
    pass

class FileMessage(Message):
    def __init__(self, src, dst):
        self.src = src
        self.dst = dst
    def __str__(self):
        return '%s -> %s' % (self.src, self.dst)

class Success(FileMessage):
    pass
    
class Failure(FileMessage):
    def __init__(self, src, dst, error):
        super(Failure, self).__init__(src, dst)
        self.error = error
    def __str__(self):
        return '%s -> %s: %s' % (self.src, self.dst, self.error)

class Estimate(Message):
    def __init__(self, total):
        self.total = total

class ConversionError(Exception):
    def __init__(self, convert_stderr):
        self.convert_stderr = convert_stderr
    def __str__(self):
        return self.convert_stderr

def parse_arguments(argv):
    parser = argparse.ArgumentParser()
    parser.add_argument('--concurrent', default=None, type=int)
    parser.add_argument('--size', default='1920x1200')
    parser.add_argument('--dry-run', default=False, action='store_true')
    parser.add_argument('--dry-run-and-sleep', default=False, action='store_true')
    parser.add_argument('src')
    parser.add_argument('dst')
    options = parser.parse_args(argv[1:])
    if options.parallel is None:
        try:
            options.parallel = max(1, cpu_count() / 2)
        except NotImplementedError:
            options.parallel = 1
    return options

def convert_image(options, src, dst):
    if options.dry_run:
        if options.dry_run_and_sleep:
            time.sleep(0.1)
        return
    process = Popen(['gm', 'convert', '-size', options.size, src, '-resize', options.size, dst], stdin=devnull, stdout=devnull, stderr=PIPE)
    out, err = process.communicate()
    if process.wait() != 0:
        raise ConversionError(err.strip())

def start_process(func, *args, **kwargs):
    p = Process(target=func, args=args, kwargs=kwargs)
    p.daemon = True
    p.start()
    return p

def worker(options, work_queue, report_queue):
    while True:
        src, dst = work_queue.get()
        try:
            convert_image(options, src, dst)
        except Exception, error:
            report_queue.put(Failure(src, dst, error))
        else:
            report_queue.put(Success(src, dst))
        work_queue.task_done()

def reporter(options, report_queue):
    success = 0
    failure = 0
    pv = None
    while True:
        msg = report_queue.get()
        if isinstance(msg, FileMessage) and pv is not None:
            pv.stdin.write(' ')
        if isinstance(msg, Success):
            success += 1
        if isinstance(msg, Failure):
            failure += 1
            print(msg)
        if isinstance(msg, Estimate):
            pv = Popen(['pv', '--progress', '--timer', '--eta', '--average-rate', '--bytes',
                        '--size', str(msg.total - success - failure)], stdin=PIPE, stdout=devnull)
        report_queue.task_done()

def main(options):
    if os.path.isdir(options.dst):
        raise SystemExit('refusing to use existing directory %s' % (options.dst,))

    work_queue = Queue()
    report_queue = Queue()

    for index in range(options.parallel):
        start_process(worker, options, work_queue, report_queue)
    start_process(reporter, options, report_queue)

    total = 0
    for directory, subdirectories, filenames in os.walk(options.src):
        src_dir = os.path.join(options.src, directory)
        dst_dir = os.path.join(options.dst, os.path.relpath(src_dir, options.src))
        os.makedirs(os.path.join(options.dst, os.path.relpath(directory, options.src)))
        for filename in filenames:
            total += 1
            work_queue.put((os.path.join(src_dir, filename), os.path.join(dst_dir, filename)))
    report_queue.put(Estimate(total))

    work_queue.join()
    report_queue.join()

if __name__ == '__main__':
    main(parse_arguments(sys.argv))
